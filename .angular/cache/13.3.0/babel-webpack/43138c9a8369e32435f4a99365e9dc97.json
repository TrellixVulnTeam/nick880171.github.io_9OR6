{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Animation } from './animation';\nimport { FormControl } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/material/button\";\nimport * as i3 from \"@angular/material/input\";\nimport * as i4 from \"@angular/forms\";\n\nfunction FakeIDEComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"div\", 6)(2, \"p\", 7);\n    i0.ɵɵtext(3, \"Initializing\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\", 7);\n    i0.ɵɵtext(5, \"Online\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"p\", 7);\n    i0.ɵɵtext(7, \"IDE\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"div\", 8);\n    i0.ɵɵlistener(\"@cubeRotation.done\", function FakeIDEComponent_div_4_Template_div_animation_cubeRotation_done_8_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.onRotationDone($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(9, \"div\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(8);\n    i0.ɵɵproperty(\"@cubeRotation\", ctx_r0.rotationStatus);\n  }\n}\n\nfunction FakeIDEComponent_div_5_ng_container_16_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"td\", 25)(2, \"div\", 26)(3, \"div\", 27)(4, \"p\", 28);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 27)(7, \"p\", 28);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const column_r10 = ctx.$implicit;\n    const c_r11 = ctx.index;\n    const r_r8 = i0.ɵɵnextContext().index;\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", ctx_r9.mapClass[r_r8][c_r11]);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(column_r10);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r9.connectedMap[r_r8][c_r11]);\n  }\n}\n\nfunction FakeIDEComponent_div_5_ng_container_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"tr\");\n    i0.ɵɵtemplate(2, FakeIDEComponent_div_5_ng_container_16_ng_container_2_Template, 9, 3, \"ng-container\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const row_r7 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", row_r7);\n  }\n}\n\nfunction FakeIDEComponent_div_5_ng_container_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"td\", 29);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const element_r13 = ctx.$implicit;\n    const i_r14 = ctx.index;\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", ctx_r5.getClass(i_r14));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r13, \"\");\n  }\n}\n\nfunction FakeIDEComponent_div_5_ng_container_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"tr\")(2, \"td\", 30);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const i_r16 = ctx.index;\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r6.elementsClass[ctx_r6.elements.length - 1 - i_r16]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r6.elementsStack[ctx_r6.elements.length - 1 - i_r16], \" \");\n  }\n}\n\nfunction FakeIDEComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 10)(1, \"div\", 11)(2, \"p\", 12);\n    i0.ɵɵlistener(\"click\", function FakeIDEComponent_div_5_Template_p_click_2_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.onChangeProblem(\"2\");\n    });\n    i0.ɵɵtext(3, \"BackTracking\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\", 12);\n    i0.ɵɵlistener(\"click\", function FakeIDEComponent_div_5_Template_p_click_4_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.onChangeProblem(\"3\");\n    });\n    i0.ɵɵtext(5, \"Check DOM elements\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"p\", 12);\n    i0.ɵɵlistener(\"click\", function FakeIDEComponent_div_5_Template_p_click_6_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return ctx_r20.onChangeProblem(\"5\");\n    });\n    i0.ɵɵtext(7, \"Recursive\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"div\", 13);\n    i0.ɵɵlistener(\"@codeSection.done\", function FakeIDEComponent_div_5_Template_div_animation_codeSection_done_8_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.printLines();\n    });\n    i0.ɵɵelementStart(9, \"pre\");\n    i0.ɵɵtext(10, \"          \");\n    i0.ɵɵelementStart(11, \"code\", 14);\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(13, \"\\n        \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(14, \"div\", 15)(15, \"table\");\n    i0.ɵɵtemplate(16, FakeIDEComponent_div_5_ng_container_16_Template, 3, 1, \"ng-container\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"div\", 17)(18, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function FakeIDEComponent_div_5_Template_button_click_18_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return ctx_r22.startToConnect();\n    });\n    i0.ɵɵtext(19, \" start \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"button\", 19);\n    i0.ɵɵlistener(\"click\", function FakeIDEComponent_div_5_Template_button_click_20_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return ctx_r23.resetConnect();\n    });\n    i0.ɵɵtext(21, \" resetConnect \");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(22, \"div\", 15);\n    i0.ɵɵelement(23, \"input\", 20);\n    i0.ɵɵelementStart(24, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function FakeIDEComponent_div_5_Template_button_click_24_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r24 = i0.ɵɵnextContext();\n      return ctx_r24.startToCheckDOMElements();\n    });\n    i0.ɵɵtext(25, \" start \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(26, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function FakeIDEComponent_div_5_Template_button_click_26_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r25 = i0.ɵɵnextContext();\n      return ctx_r25.resetDOMElements();\n    });\n    i0.ɵɵtext(27, \" reset \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(28, \"div\")(29, \"div\", 21)(30, \"table\")(31, \"tr\");\n    i0.ɵɵtemplate(32, FakeIDEComponent_div_5_ng_container_32_Template, 3, 2, \"ng-container\", 16);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(33, \"div\", 22)(34, \"div\", 23)(35, \"table\");\n    i0.ɵɵtemplate(36, FakeIDEComponent_div_5_ng_container_36_Template, 4, 2, \"ng-container\", 16);\n    i0.ɵɵelementEnd()()()()();\n    i0.ɵɵelementStart(37, \"div\", 15)(38, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function FakeIDEComponent_div_5_Template_button_click_38_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return ctx_r26.startRecursive();\n    });\n    i0.ɵɵtext(39, \" start Recursive \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(40, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function FakeIDEComponent_div_5_Template_button_click_40_listener() {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r27 = i0.ɵɵnextContext();\n      return ctx_r27.resetGlobal();\n    });\n    i0.ɵɵtext(41, \" reset \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(42, \"div\")(43, \"div\", 22)(44, \"div\", 23)(45, \"p\", 24);\n    i0.ɵɵtext(46);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(47, \"p\", 24);\n    i0.ɵɵtext(48);\n    i0.ɵɵelementEnd()()()()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"@problemsSection\", undefined);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"@codeSection\", undefined);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r1.typingCodes);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"@solutionPanelSlide\", ctx_r1.statusForSolutionPanel[2]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.map);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"@solutionPanelSlide\", ctx_r1.statusForSolutionPanel[3]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formControl\", ctx_r1.domFormControl);\n    i0.ɵɵadvance(9);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.elements);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.elements);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"@solutionPanelSlide\", ctx_r1.statusForSolutionPanel[5]);\n    i0.ɵɵadvance(9);\n    i0.ɵɵtextInterpolate(ctx_r1.recursiveTest);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.waitingStatus);\n  }\n}\n\nvar PROBLEM_CODE = /*#__PURE__*/(() => {\n  (function (PROBLEM_CODE) {\n    PROBLEM_CODE[\"CONNECTED_GRAPH\"] = \"2\";\n    PROBLEM_CODE[\"CHECH_HTML_DOM_ELEMENT\"] = \"3\";\n    PROBLEM_CODE[\"RECURSIVE\"] = \"5\";\n  })(PROBLEM_CODE || (PROBLEM_CODE = {}));\n\n  return PROBLEM_CODE;\n})();\nexport let FakeIDEComponent = /*#__PURE__*/(() => {\n  class FakeIDEComponent {\n    constructor() {\n      this.activeSolutionPanel = '0';\n      this.recursiveTest = 0;\n      this.waitingStatus = false;\n      this.currentIndex = 0;\n      this.isReset = false;\n      this.isChecking = false;\n      this.elementsClass = new Array();\n      this.domFormControl = new FormControl('');\n      this.elements = new Array();\n      this.elementsStack = new Array();\n      this.currentDOM = '';\n      this.statusForSolutionPanel = ['hidden', 'hidden', 'hidden', 'hidden', 'hidden', 'hidden'];\n      this.connectIsReset = false;\n      this.map = new Array([0, 0, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 0, 1, 1, 1], [1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0]);\n      this.connectedMap = new Array();\n      this.mapClass = new Array();\n      this.problem = '1';\n      this.loading = true;\n      this.typingCodes = '';\n      this.codebase = ['\\npublic class Example {', '\\n  public static void main(String[] args) {', '\\n      System.out.println(\"Hello World\");', '\\n  }', '\\n}'];\n      this.rotationStatus = 'animationStart';\n    }\n\n    ngOnInit() {\n      this.mapInit();\n      setTimeout(() => {\n        this.loading = false;\n      }, 1000);\n    }\n\n    mapInit() {\n      for (let i = 0; i < this.map.length; i++) {\n        this.connectedMap.push(new Array());\n        this.mapClass.push(new Array());\n\n        for (let j = 0; j < this.map[0].length; j++) {\n          this.connectedMap[i].push('null');\n          this.mapClass[i].push('null');\n        }\n      }\n\n      this.setMapClass();\n    }\n\n    ngAfterViewInit() {}\n\n    onRotationDone($event) {\n      if (this.loading) {\n        this.rotationStatus = this.rotationStatus === 'animationStart' ? 'animationStop' : 'animationStart';\n      }\n    }\n\n    isLoading() {\n      if (this.loading) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    printLine(codebaseLine) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return new Promise(resoleve => {\n          const chars = Array.from(codebaseLine);\n          console.log('========chars??: ', chars);\n          let i = 0;\n          this.runningInterval = setInterval(() => {\n            this.typingCodes += chars[i++];\n\n            if (i === chars.length) {\n              resoleve();\n              clearInterval(this.runningInterval);\n            }\n          }, 10);\n        });\n      });\n    }\n\n    printLines() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.typingCodes = ''; // !!!!!!!! promise does not work inside for-each loop\n\n        for (const codebaseLine of this.codebase) {\n          yield this.printLine(codebaseLine);\n        }\n      });\n    }\n\n    onChangeProblem(code) {\n      this.problem = code;\n\n      switch (code) {\n        case '1':\n          {\n            this.codebase = ['\\ndivideBy2(baseMinus2Bits: string): string{', '\\n   const leftShiftBits = leftShift(baseMinus2Bits)', '\\n   return minus2Adder(baseMinus2Bits, leftShiftBits)', '\\n}', '\\n', '\\nminus2Adder(bits1: string, bits2: string): string{', '\\n}'];\n            clearInterval(this.runningInterval);\n            this.printLines();\n            break;\n          }\n\n        case PROBLEM_CODE.CONNECTED_GRAPH:\n          {\n            this.setSolutionPanelStatus(PROBLEM_CODE.CONNECTED_GRAPH);\n            this.codebase = ['\\n backTracking(origianlPoint: Array<number>, startPoint: Array<number>): void{', '\\n   for(row of rows){', '\\n     for(column of columns{', '\\n       backTracking([row, column])', '\\n     }', '\\n   }', '\\n }', '\\n', '\\n backTracking( stratPoint): void{', '\\n   if (untouched && 0){', '\\n     touch && set the origin', '\\n     backTrack(up)', '\\n     backTrack(down)', '\\n     backTrack(left)', '\\n     backTrack(right)', '\\n    }', '\\n}'];\n            clearInterval(this.runningInterval);\n            this.printLines();\n            break;\n          }\n\n        case PROBLEM_CODE.CHECH_HTML_DOM_ELEMENT:\n          {\n            this.setSolutionPanelStatus(PROBLEM_CODE.CHECH_HTML_DOM_ELEMENT);\n            this.codebase = ['\\n check(origianlPoint: Array<number>, startPoint: Array<number>): void{', '\\n   for(row of rows){', '\\n     for(column of columns{', '\\n       backTracking([row, column])', '\\n     }', '\\n   }', '\\n }', '\\n', '\\n backTracking( stratPoint): void{', '\\n   if (untouched && 0){', '\\n     touch && set the origin', '\\n     backTrack(up)', '\\n     backTrack(down)', '\\n     backTrack(left)', '\\n     backTrack(right)', '\\n    }', '\\n }'];\n            clearInterval(this.runningInterval);\n            this.printLines();\n            break;\n          }\n\n        case PROBLEM_CODE.RECURSIVE:\n          {\n            this.setSolutionPanelStatus(PROBLEM_CODE.RECURSIVE);\n            this.codebase = ['\\n check(origianlPoint: Array<number>, startPoint: Array<number>): void{', '\\n   for(row of rows){', '\\n     for(column of columns{', '\\n       backTracking([row, column])', '\\n     }', '\\n   }', '\\n }', '\\n', '\\n backTracking( stratPoint): void{', '\\n   if (untouched && 0){', '\\n     touch && set the origin', '\\n     backTrack(up)', '\\n     backTrack(down)', '\\n     backTrack(left)', '\\n     backTrack(right)', '\\n    }', '\\n }'];\n            clearInterval(this.runningInterval);\n            this.printLines();\n            break;\n          }\n      }\n    }\n\n    setSolutionPanelStatus(activePanel) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.statusForSolutionPanel[Number(this.activeSolutionPanel)] = 'hidden';\n        yield this.timer(500);\n        this.activeSolutionPanel = activePanel;\n        this.statusForSolutionPanel[Number(this.activeSolutionPanel)] = 'slideIn';\n      });\n    }\n\n    test() {\n      for (let i = 0; i < 9999; i++) {\n        console.log('=========', i);\n      }\n    }\n\n    setMapClass() {\n      for (let i = 0; i < this.map.length; i++) {\n        for (let j = 0; j < this.map[0].length; j++) {\n          if (this.map[i][j] === 0) {\n            this.mapClass[i][j] = 'hole';\n          } else {\n            this.mapClass[i][j] = 'solid';\n          }\n        }\n      }\n    }\n\n    resetConnect() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.connectedMap = new Array();\n        this.mapClass = new Array();\n        this.mapInit();\n      });\n    }\n\n    startToConnect() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const connectedGraphResetButton = document.getElementById('connectedGraphResetButton');\n        const connectedGraphStartButton = document.getElementById('connectedGraphStartButton');\n        connectedGraphResetButton.disabled = true;\n        connectedGraphStartButton.disabled = true;\n        yield this.resetConnect;\n\n        for (let i = 0; i < this.map.length; i++) {\n          for (let j = 0; j < this.map[0].length; j++) {\n            yield this.backTracking([i, j], [i, j]);\n            this.mapClass[i][j] += ', current';\n            yield this.timer(100);\n            this.mapClass[i][j] = this.mapClass[i][j].replace(', current', '');\n          }\n        }\n\n        connectedGraphResetButton.disabled = false;\n        connectedGraphStartButton.disabled = false;\n      });\n    }\n\n    backTracking(origianlPoint, startPoint) {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield this.timer(100);\n\n        if (this.map[startPoint[0]][startPoint[1]] === 0 && this.connectedMap[startPoint[0]][startPoint[1]] === 'null') {\n          this.connectedMap[startPoint[0]][startPoint[1]] = origianlPoint[0].toString() + origianlPoint[1].toString();\n          this.mapClass[startPoint[0]][startPoint[1]] = 'touched'; // go top\n\n          if (startPoint[0] - 1 >= 0) {\n            yield this.backTracking(origianlPoint, [startPoint[0] - 1, startPoint[1]]);\n          } // go left\n\n\n          if (startPoint[1] - 1 >= 0) {\n            yield this.backTracking(origianlPoint, [startPoint[0], startPoint[1] - 1]);\n          } // go right\n\n\n          if (startPoint[1] + 1 < this.map[0].length) {\n            yield this.backTracking(origianlPoint, [startPoint[0], startPoint[1] + 1]);\n          } // go down\n\n\n          if (startPoint[0] + 1 < this.map.length) {\n            yield this.backTracking(origianlPoint, [startPoint[0] + 1, startPoint[1]]);\n          }\n        }\n      });\n    }\n\n    startToCheckDOMElements() {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield this.resetDOMElements();\n        this.isChecking = true;\n        const elementsString = this.domFormControl.value;\n        this.elements = this.splitElementsByAngleBracket(elementsString);\n        this.stackCheck(this.elements);\n      });\n    }\n\n    resetDOMElements() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.isReset = true;\n        this.currentDOM = '';\n        this.elements = [];\n        this.elementsClass = [];\n        this.elementsStack = [];\n\n        if (this.isChecking) {\n          yield this.timer(1100);\n        }\n\n        this.isReset = false;\n      });\n    }\n\n    getClass(index) {\n      if (index === this.currentIndex) {\n        return 'currentDOM';\n      } else {\n        return 'notCurrentDOM';\n      }\n    }\n\n    startRecursive() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.waitingStatus = true;\n        yield this.timer(1000);\n        this.waitingStatus = false;\n\n        if (this.recursiveTest < 30) {\n          this.recursiveTest++;\n          this.startRecursive();\n        }\n      });\n    }\n\n    resetGlobal() {\n      this.recursiveTest = 0;\n    }\n\n    splitElementsByAngleBracket(elementsString) {\n      let isElement = false;\n      let element = '';\n      const elements = new Array();\n\n      for (let i = 0; i < elementsString.length; i++) {\n        if (elementsString[i] === '<') {\n          isElement = true;\n        } else if (elementsString[i] === '>') {\n          this.elementsClass.push('stackDefault');\n          elements.push(element);\n          element = '';\n          isElement = false;\n          continue;\n        } else if (isElement === true) {\n          element += elementsString[i];\n        }\n      }\n\n      return elements;\n    }\n\n    stackCheck(elements) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let last = -1;\n\n        for (let i = 0; i < elements.length; i++) {\n          this.currentIndex = i;\n\n          if (this.isReset === true) {\n            break;\n          }\n\n          this.currentDOM = elements[i];\n\n          if (!elements[i].includes('/')) {\n            last++;\n            this.elementsStack[last] = elements[i];\n            this.elementsClass[last] = 'stackPushed';\n          } else {\n            if (this.elementsStack[last] !== elements[i].replace('/', '')) {\n              break;\n            } else {\n              this.elementsStack[last] = '';\n              this.elementsClass[last] = 'stackDefault';\n              last--;\n            }\n          }\n\n          yield this.timer(1000);\n        }\n\n        this.isChecking = false;\n        return this.elementsStack[this.elementsStack.length - 1];\n      });\n    }\n\n    timer(ms) {\n      return new Promise(res => {\n        setTimeout(res, ms);\n      });\n    }\n\n  }\n\n  FakeIDEComponent.ɵfac = function FakeIDEComponent_Factory(t) {\n    return new (t || FakeIDEComponent)();\n  };\n\n  FakeIDEComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FakeIDEComponent,\n    selectors: [[\"app-fakeIDE\"]],\n    decls: 6,\n    vars: 2,\n    consts: [[1, \"containerForPIXI\"], [2, \"position\", \"absolute\", \"top\", \"3vh\", \"color\", \"black\"], [1, \"wrapper\"], [\"class\", \"loader\", \"id\", \"js-loader\", 4, \"ngIf\"], [\"class\", \"content\", 4, \"ngIf\"], [\"id\", \"js-loader\", 1, \"loader\"], [1, \"groupP\"], [1, \"loader__p\"], [\"id\", \"js-loader-cube\", 1, \"loader__cube\"], [\"id\", \"js-loader-line\", 1, \"loader__line\"], [1, \"content\"], [1, \"problems\"], [3, \"click\"], [1, \"IDE\"], [2, \"color\", \"greenyellow\"], [1, \"visualPanel\"], [4, \"ngFor\", \"ngForOf\"], [1, \"buttonGroup\"], [\"mat-stroked-button\", \"\", \"id\", \"connectedGraphStartButton\", 3, \"click\"], [\"mat-stroked-button\", \"\", \"id\", \"connectedGraphResetButton\", 1, \"buttonGroupButton\", 3, \"click\"], [\"matInput\", \"\", 3, \"formControl\"], [2, \"margin-top\", \"10%\"], [1, \"domStack\"], [1, \"inlineBlock\"], [2, \"color\", \"black\"], [2, \"width\", \"5vh\", \"height\", \"5vh\", 3, \"ngClass\"], [1, \"central\"], [1, \"divP\"], [1, \"centralP\"], [2, \"width\", \"3vw\", \"height\", \"2vw\", \"color\", \"black\", \"border\", \"1px solid black\", 3, \"ngClass\"], [3, \"ngClass\"]],\n    template: function FakeIDEComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"body\", 0)(1, \"h1\", 1);\n        i0.ɵɵtext(2, \"Online TypeScript IDE (FAKE)\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵtemplate(4, FakeIDEComponent_div_4_Template, 10, 1, \"div\", 3);\n        i0.ɵɵtemplate(5, FakeIDEComponent_div_5_Template, 49, 12, \"div\", 4);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.loading);\n      }\n    },\n    directives: [i1.NgIf, i1.NgForOf, i1.NgClass, i2.MatButton, i3.MatInput, i4.DefaultValueAccessor, i4.NgControlStatus, i4.FormControlDirective],\n    styles: [\".containerForPIXI[_ngcontent-%COMP%]{float:right;width:100vw;height:100vh}body[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:center;margin:0;font-family:Noto Sans HK,sans-serif;font-weight:400;color:#fff;background:#f4f4f4}.wrapper[_ngcontent-%COMP%]{position:relative;overflow:hidden;width:100vw;height:100%;border:4px solid #393638;background:#000;box-shadow:-5px 5px 20px 10px #0000004d}.content[_ngcontent-%COMP%]{height:90%;margin-top:5%;margin-bottom:5%}.problems[_ngcontent-%COMP%]{display:inline-block;vertical-align:top;margin-left:5vw;width:10%;height:80%}.IDE[_ngcontent-%COMP%]{display:inline-block;vertical-align:top;overflow:hidden;margin-left:5px;width:60vw;height:80%;border-radius:20px;border:4px solid #393638;background:rgba(153,150,150,.3);box-shadow:-5px 5px 20px 10px #0000004d}.visualPanel[_ngcontent-%COMP%]{border-top-left-radius:20px;border-bottom-left-radius:20px;background-color:#f5f5f5;padding:3%;top:5vh;right:0vw;position:absolute;float:right;width:30vw;height:80vh}.buttonGroup[_ngcontent-%COMP%]{margin-top:5vh}.buttonGroupButton[_ngcontent-%COMP%]{margin-left:1vw}.central[_ngcontent-%COMP%]{margin:auto}.divP[_ngcontent-%COMP%]{height:2vh}.centralP[_ngcontent-%COMP%]{text-align:center;line-height:2vh}.domStack[_ngcontent-%COMP%]{margin-top:10%}.inlineBlock[_ngcontent-%COMP%]{margin-left:5%;display:inline-block}.hole[_ngcontent-%COMP%]{background-color:gray}.solid[_ngcontent-%COMP%]{background-color:wheat}.touched[_ngcontent-%COMP%]{background-color:red}.current[_ngcontent-%COMP%]{border-radius:1;border-color:#daa520}.stackDefault[_ngcontent-%COMP%]{width:3vw;height:2vw;color:#fff;background-color:#0ff;border:1px solid black}.stackPushed[_ngcontent-%COMP%]{width:3vw;height:2vw;color:#000;border:1px solid black}.currentDOM[_ngcontent-%COMP%]{background-color:red}.notCurrentDOM[_ngcontent-%COMP%]{background-color:#fff}.form[_ngcontent-%COMP%], textarea[_ngcontent-%COMP%]{width:100%;height:100%}.groupP[_ngcontent-%COMP%]{position:absolute;z-index:3;top:50%;left:50%;transform:translate(-50%,-50%)}pre[_ngcontent-%COMP%]{margin-left:3vw}.loader[_ngcontent-%COMP%]{position:absolute;z-index:2;opacity:1;top:50%;left:50%;transform:translate(-50%,-50%);width:200px;height:200px}.loader__p[_ngcontent-%COMP%]{text-align:center;width:10vw}.loader__cube[_ngcontent-%COMP%]{width:100%;height:100%;transform:rotate(45deg);border:1px solid #ffffff}\"],\n    data: {\n      animation: [Animation.cubeRotation, Animation.codeSection, Animation.problemsSection, Animation.solutionPanelSlide]\n    }\n  });\n  return FakeIDEComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}