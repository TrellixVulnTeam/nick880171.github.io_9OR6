{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { PostModel } from './post.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/common/http/http.service\";\nexport let AnimationService = /*#__PURE__*/(() => {\n  class AnimationService {\n    constructor(httpService) {\n      this.httpService = httpService;\n      this.apiUrl = '/tasks';\n      this.error = new Subject();\n      this.itemListenerSubject = new Subject();\n      this.list = []; // this.itemListener();\n    }\n\n    addItem(inpurString) {\n      const body = {\n        title: inpurString,\n        description: inpurString\n      };\n      this.httpService.postHttpMethod(this.apiUrl, body).subscribe(res => {\n        console.log('======post return res: ', res);\n      }, err => {\n        this.error.next(err.message);\n      });\n    }\n\n    itemListener() {\n      setInterval(() => {\n        this.getItems().subscribe(res => {\n          res.forEach(item => {\n            if (!this.list.some(listItem => listItem.id === item.id)) {\n              this.itemListenerSubject.next(item);\n              this.list.push(new PostModel(item));\n            }\n          });\n        });\n      }, 1000);\n    }\n\n    getItems() {\n      return this.httpService.getHttpMethod(this.apiUrl).pipe(map(responseData => {\n        const items = responseData;\n        return items;\n      }));\n    }\n\n    onClickGetItems() {\n      this.getItems().subscribe(res => {\n        res.forEach(item => {\n          if (!this.list.some(listItem => listItem.id === item.id)) {\n            this.itemListenerSubject.next(item);\n            this.list.push(new PostModel(item));\n          }\n        });\n      });\n    }\n\n    deleteItem(item) {\n      this.list.splice(this.list.findIndex(i => i.id === item.id), 1);\n      this.httpService.deleteHttpMethod(this.apiUrl + '/' + item.id).subscribe(res => {}, err => {\n        this.error.next(err.message);\n      });\n    }\n\n  }\n\n  AnimationService.ɵfac = function AnimationService_Factory(t) {\n    return new (t || AnimationService)(i0.ɵɵinject(i1.HttpService));\n  };\n\n  AnimationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AnimationService,\n    factory: AnimationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AnimationService;\n})();","map":null,"metadata":{},"sourceType":"module"}